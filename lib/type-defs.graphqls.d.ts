/* ef4a0dc37c8d019f96949565851e2d99206b0543
 * This file is automatically generated by graphql-let. */

import { GraphQLResolveInfo } from 'graphql';
export declare type Maybe<T> = T | null;
/** All built-in and custom scalars, mapped to their actual values */
export declare type Scalars = {
    ID: string;
    String: string;
    Boolean: boolean;
    Int: number;
    Float: number;
};
export declare type ContentSys = {
    __typename?: 'ContentSys';
    type?: Maybe<Scalars['String']>;
    linkType?: Maybe<Scalars['String']>;
    id?: Maybe<Scalars['String']>;
};
export declare type ContentType = {
    __typename?: 'ContentType';
    sys?: Maybe<ContentSys>;
};
export declare type Country = {
    __typename?: 'Country';
    sys?: Maybe<EntrySys>;
    fields?: Maybe<CountryFields>;
};
export declare type CountryFields = {
    __typename?: 'CountryFields';
    countryName?: Maybe<Scalars['String']>;
};
export declare type Entry = {
    __typename?: 'Entry';
    sys?: Maybe<EntrySys>;
    fields?: Maybe<EntryFields>;
};
export declare type EntryFields = {
    __typename?: 'EntryFields';
    pageTitle?: Maybe<Scalars['String']>;
    productBlock?: Maybe<ProductBlock>;
    instructionBlock?: Maybe<InstructionBlock>;
    slug?: Maybe<Scalars['String']>;
    countries?: Maybe<Array<Maybe<Country>>>;
};
export declare type EntrySys = {
    __typename?: 'EntrySys';
    space?: Maybe<Space>;
    type?: Maybe<Scalars['String']>;
    id?: Maybe<Scalars['String']>;
    contentType?: Maybe<ContentType>;
    revision?: Maybe<Scalars['Int']>;
    createdAt?: Maybe<Scalars['String']>;
    updatedAt?: Maybe<Scalars['String']>;
    environment?: Maybe<Environment>;
    locale?: Maybe<Scalars['String']>;
};
export declare type Environment = {
    __typename?: 'Environment';
    sys?: Maybe<EnvironmentSys>;
};
export declare type EnvironmentSys = {
    __typename?: 'EnvironmentSys';
    id?: Maybe<Scalars['String']>;
    type?: Maybe<Scalars['String']>;
    linkType?: Maybe<Scalars['String']>;
};
export declare type ImageDimensions = {
    __typename?: 'ImageDimensions';
    width?: Maybe<Scalars['Int']>;
    height?: Maybe<Scalars['Int']>;
};
export declare type ImageFile = {
    __typename?: 'ImageFile';
    url?: Maybe<Scalars['String']>;
    imageFileDetails?: Maybe<ImageFileDetails>;
    fileName?: Maybe<Scalars['String']>;
    contentType?: Maybe<Scalars['String']>;
};
export declare type ImageFileDetails = {
    __typename?: 'ImageFileDetails';
    size?: Maybe<Scalars['Int']>;
    image?: Maybe<ImageDimensions>;
};
export declare type Instruction = {
    __typename?: 'Instruction';
    sys?: Maybe<EntrySys>;
    fields?: Maybe<InstructionFields>;
};
export declare type InstructionBlock = {
    __typename?: 'InstructionBlock';
    sys?: Maybe<EntrySys>;
    fields?: Maybe<InstructionBlockFields>;
};
export declare type InstructionBlockFields = {
    __typename?: 'InstructionBlockFields';
    instructionComponent?: Maybe<InstructionComponent>;
    title?: Maybe<Scalars['String']>;
    style?: Maybe<Scalars['String']>;
};
export declare type InstructionComponent = {
    __typename?: 'InstructionComponent';
    sys?: Maybe<EntrySys>;
    fields?: Maybe<InstructionComponentFields>;
};
export declare type InstructionComponentFields = {
    __typename?: 'InstructionComponentFields';
    title?: Maybe<Scalars['String']>;
    instructions?: Maybe<Array<Maybe<Instruction>>>;
};
export declare type InstructionFields = {
    __typename?: 'InstructionFields';
    text?: Maybe<Scalars['String']>;
    image?: Maybe<ProductImage>;
    title?: Maybe<Scalars['String']>;
};
export declare type MagentoProductInfo = {
    __typename?: 'MagentoProductInfo';
    sys?: Maybe<EntrySys>;
    fields?: Maybe<ProductInfoFields>;
};
export declare type ProductBlock = {
    __typename?: 'ProductBlock';
    sys?: Maybe<EntrySys>;
    fields?: Maybe<ProductBlockFields>;
};
export declare type ProductBlockFields = {
    __typename?: 'ProductBlockFields';
    productComponent?: Maybe<ProductComponent>;
    style?: Maybe<Scalars['String']>;
    blockTitle?: Maybe<Scalars['String']>;
};
export declare type ProductComponent = {
    __typename?: 'ProductComponent';
    sys?: Maybe<EntrySys>;
    fields?: Maybe<ProductComponentFields>;
};
export declare type ProductComponentFields = {
    __typename?: 'ProductComponentFields';
    productName?: Maybe<Scalars['String']>;
    image?: Maybe<Array<Maybe<ProductImage>>>;
    magentoProductInfo?: Maybe<Array<Maybe<MagentoProductInfo>>>;
    slug?: Maybe<Scalars['String']>;
};
export declare type ProductImage = {
    __typename?: 'ProductImage';
    sys?: Maybe<EntrySys>;
    fields?: Maybe<ProductImageFields>;
};
export declare type ProductImageFields = {
    __typename?: 'ProductImageFields';
    title?: Maybe<Scalars['String']>;
    file?: Maybe<ImageFile>;
};
export declare type ProductInfoFields = {
    __typename?: 'ProductInfoFields';
    sku?: Maybe<Scalars['String']>;
};
export declare type Query = {
    __typename?: 'Query';
    viewer: User;
    entries?: Maybe<Array<Maybe<Entry>>>;
};
export declare type Space = {
    __typename?: 'Space';
    sys?: Maybe<SpaceSys>;
    type?: Maybe<Scalars['String']>;
    id?: Maybe<Scalars['String']>;
};
export declare type SpaceSys = {
    __typename?: 'SpaceSys';
    type?: Maybe<Scalars['String']>;
    linkType?: Maybe<Scalars['String']>;
    id?: Maybe<Scalars['String']>;
};
export declare type User = {
    __typename?: 'User';
    id: Scalars['ID'];
    name: Scalars['String'];
    status: Scalars['String'];
};
export declare type ResolverTypeWrapper<T> = Promise<T> | T;
export declare type StitchingResolver<TResult, TParent, TContext, TArgs> = {
    fragment: string;
    resolve: ResolverFn<TResult, TParent, TContext, TArgs>;
};
export declare type Resolver<TResult, TParent = {}, TContext = {}, TArgs = {}> = ResolverFn<TResult, TParent, TContext, TArgs> | StitchingResolver<TResult, TParent, TContext, TArgs>;
export declare type ResolverFn<TResult, TParent, TContext, TArgs> = (parent: TParent, args: TArgs, context: TContext, info: GraphQLResolveInfo) => Promise<TResult> | TResult;
export declare type SubscriptionSubscribeFn<TResult, TParent, TContext, TArgs> = (parent: TParent, args: TArgs, context: TContext, info: GraphQLResolveInfo) => AsyncIterator<TResult> | Promise<AsyncIterator<TResult>>;
export declare type SubscriptionResolveFn<TResult, TParent, TContext, TArgs> = (parent: TParent, args: TArgs, context: TContext, info: GraphQLResolveInfo) => TResult | Promise<TResult>;
export interface SubscriptionSubscriberObject<TResult, TKey extends string, TParent, TContext, TArgs> {
    subscribe: SubscriptionSubscribeFn<{
        [key in TKey]: TResult;
    }, TParent, TContext, TArgs>;
    resolve?: SubscriptionResolveFn<TResult, {
        [key in TKey]: TResult;
    }, TContext, TArgs>;
}
export interface SubscriptionResolverObject<TResult, TParent, TContext, TArgs> {
    subscribe: SubscriptionSubscribeFn<any, TParent, TContext, TArgs>;
    resolve: SubscriptionResolveFn<TResult, any, TContext, TArgs>;
}
export declare type SubscriptionObject<TResult, TKey extends string, TParent, TContext, TArgs> = SubscriptionSubscriberObject<TResult, TKey, TParent, TContext, TArgs> | SubscriptionResolverObject<TResult, TParent, TContext, TArgs>;
export declare type SubscriptionResolver<TResult, TKey extends string, TParent = {}, TContext = {}, TArgs = {}> = ((...args: any[]) => SubscriptionObject<TResult, TKey, TParent, TContext, TArgs>) | SubscriptionObject<TResult, TKey, TParent, TContext, TArgs>;
export declare type TypeResolveFn<TTypes, TParent = {}, TContext = {}> = (parent: TParent, context: TContext, info: GraphQLResolveInfo) => Maybe<TTypes> | Promise<Maybe<TTypes>>;
export declare type isTypeOfResolverFn<T = {}> = (obj: T, info: GraphQLResolveInfo) => boolean | Promise<boolean>;
export declare type NextResolverFn<T> = () => Promise<T>;
export declare type DirectiveResolverFn<TResult = {}, TParent = {}, TContext = {}, TArgs = {}> = (next: NextResolverFn<TResult>, parent: TParent, args: TArgs, context: TContext, info: GraphQLResolveInfo) => TResult | Promise<TResult>;
/** Mapping between all available schema types and the resolvers types */
export declare type ResolversTypes = {
    Query: ResolverTypeWrapper<{}>;
    User: ResolverTypeWrapper<User>;
    ID: ResolverTypeWrapper<Scalars['ID']>;
    String: ResolverTypeWrapper<Scalars['String']>;
    Entry: ResolverTypeWrapper<Entry>;
    EntrySys: ResolverTypeWrapper<EntrySys>;
    Space: ResolverTypeWrapper<Space>;
    SpaceSys: ResolverTypeWrapper<SpaceSys>;
    ContentType: ResolverTypeWrapper<ContentType>;
    ContentSys: ResolverTypeWrapper<ContentSys>;
    Int: ResolverTypeWrapper<Scalars['Int']>;
    Environment: ResolverTypeWrapper<Environment>;
    EnvironmentSys: ResolverTypeWrapper<EnvironmentSys>;
    EntryFields: ResolverTypeWrapper<EntryFields>;
    ProductBlock: ResolverTypeWrapper<ProductBlock>;
    ProductBlockFields: ResolverTypeWrapper<ProductBlockFields>;
    ProductComponent: ResolverTypeWrapper<ProductComponent>;
    ProductComponentFields: ResolverTypeWrapper<ProductComponentFields>;
    ProductImage: ResolverTypeWrapper<ProductImage>;
    ProductImageFields: ResolverTypeWrapper<ProductImageFields>;
    ImageFile: ResolverTypeWrapper<ImageFile>;
    ImageFileDetails: ResolverTypeWrapper<ImageFileDetails>;
    ImageDimensions: ResolverTypeWrapper<ImageDimensions>;
    MagentoProductInfo: ResolverTypeWrapper<MagentoProductInfo>;
    ProductInfoFields: ResolverTypeWrapper<ProductInfoFields>;
    InstructionBlock: ResolverTypeWrapper<InstructionBlock>;
    InstructionBlockFields: ResolverTypeWrapper<InstructionBlockFields>;
    InstructionComponent: ResolverTypeWrapper<InstructionComponent>;
    InstructionComponentFields: ResolverTypeWrapper<InstructionComponentFields>;
    Instruction: ResolverTypeWrapper<Instruction>;
    InstructionFields: ResolverTypeWrapper<InstructionFields>;
    Country: ResolverTypeWrapper<Country>;
    CountryFields: ResolverTypeWrapper<CountryFields>;
    Boolean: ResolverTypeWrapper<Scalars['Boolean']>;
};
/** Mapping between all available schema types and the resolvers parents */
export declare type ResolversParentTypes = {
    Query: {};
    User: User;
    ID: Scalars['ID'];
    String: Scalars['String'];
    Entry: Entry;
    EntrySys: EntrySys;
    Space: Space;
    SpaceSys: SpaceSys;
    ContentType: ContentType;
    ContentSys: ContentSys;
    Int: Scalars['Int'];
    Environment: Environment;
    EnvironmentSys: EnvironmentSys;
    EntryFields: EntryFields;
    ProductBlock: ProductBlock;
    ProductBlockFields: ProductBlockFields;
    ProductComponent: ProductComponent;
    ProductComponentFields: ProductComponentFields;
    ProductImage: ProductImage;
    ProductImageFields: ProductImageFields;
    ImageFile: ImageFile;
    ImageFileDetails: ImageFileDetails;
    ImageDimensions: ImageDimensions;
    MagentoProductInfo: MagentoProductInfo;
    ProductInfoFields: ProductInfoFields;
    InstructionBlock: InstructionBlock;
    InstructionBlockFields: InstructionBlockFields;
    InstructionComponent: InstructionComponent;
    InstructionComponentFields: InstructionComponentFields;
    Instruction: Instruction;
    InstructionFields: InstructionFields;
    Country: Country;
    CountryFields: CountryFields;
    Boolean: Scalars['Boolean'];
};
export declare type ContentSysResolvers<ContextType = any, ParentType extends ResolversParentTypes['ContentSys'] = ResolversParentTypes['ContentSys']> = {
    type?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    linkType?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    __isTypeOf?: isTypeOfResolverFn<ParentType>;
};
export declare type ContentTypeResolvers<ContextType = any, ParentType extends ResolversParentTypes['ContentType'] = ResolversParentTypes['ContentType']> = {
    sys?: Resolver<Maybe<ResolversTypes['ContentSys']>, ParentType, ContextType>;
    __isTypeOf?: isTypeOfResolverFn<ParentType>;
};
export declare type CountryResolvers<ContextType = any, ParentType extends ResolversParentTypes['Country'] = ResolversParentTypes['Country']> = {
    sys?: Resolver<Maybe<ResolversTypes['EntrySys']>, ParentType, ContextType>;
    fields?: Resolver<Maybe<ResolversTypes['CountryFields']>, ParentType, ContextType>;
    __isTypeOf?: isTypeOfResolverFn<ParentType>;
};
export declare type CountryFieldsResolvers<ContextType = any, ParentType extends ResolversParentTypes['CountryFields'] = ResolversParentTypes['CountryFields']> = {
    countryName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    __isTypeOf?: isTypeOfResolverFn<ParentType>;
};
export declare type EntryResolvers<ContextType = any, ParentType extends ResolversParentTypes['Entry'] = ResolversParentTypes['Entry']> = {
    sys?: Resolver<Maybe<ResolversTypes['EntrySys']>, ParentType, ContextType>;
    fields?: Resolver<Maybe<ResolversTypes['EntryFields']>, ParentType, ContextType>;
    __isTypeOf?: isTypeOfResolverFn<ParentType>;
};
export declare type EntryFieldsResolvers<ContextType = any, ParentType extends ResolversParentTypes['EntryFields'] = ResolversParentTypes['EntryFields']> = {
    pageTitle?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    productBlock?: Resolver<Maybe<ResolversTypes['ProductBlock']>, ParentType, ContextType>;
    instructionBlock?: Resolver<Maybe<ResolversTypes['InstructionBlock']>, ParentType, ContextType>;
    slug?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    countries?: Resolver<Maybe<Array<Maybe<ResolversTypes['Country']>>>, ParentType, ContextType>;
    __isTypeOf?: isTypeOfResolverFn<ParentType>;
};
export declare type EntrySysResolvers<ContextType = any, ParentType extends ResolversParentTypes['EntrySys'] = ResolversParentTypes['EntrySys']> = {
    space?: Resolver<Maybe<ResolversTypes['Space']>, ParentType, ContextType>;
    type?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    contentType?: Resolver<Maybe<ResolversTypes['ContentType']>, ParentType, ContextType>;
    revision?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    createdAt?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    updatedAt?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    environment?: Resolver<Maybe<ResolversTypes['Environment']>, ParentType, ContextType>;
    locale?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    __isTypeOf?: isTypeOfResolverFn<ParentType>;
};
export declare type EnvironmentResolvers<ContextType = any, ParentType extends ResolversParentTypes['Environment'] = ResolversParentTypes['Environment']> = {
    sys?: Resolver<Maybe<ResolversTypes['EnvironmentSys']>, ParentType, ContextType>;
    __isTypeOf?: isTypeOfResolverFn<ParentType>;
};
export declare type EnvironmentSysResolvers<ContextType = any, ParentType extends ResolversParentTypes['EnvironmentSys'] = ResolversParentTypes['EnvironmentSys']> = {
    id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    type?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    linkType?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    __isTypeOf?: isTypeOfResolverFn<ParentType>;
};
export declare type ImageDimensionsResolvers<ContextType = any, ParentType extends ResolversParentTypes['ImageDimensions'] = ResolversParentTypes['ImageDimensions']> = {
    width?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    height?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    __isTypeOf?: isTypeOfResolverFn<ParentType>;
};
export declare type ImageFileResolvers<ContextType = any, ParentType extends ResolversParentTypes['ImageFile'] = ResolversParentTypes['ImageFile']> = {
    url?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    imageFileDetails?: Resolver<Maybe<ResolversTypes['ImageFileDetails']>, ParentType, ContextType>;
    fileName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    contentType?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    __isTypeOf?: isTypeOfResolverFn<ParentType>;
};
export declare type ImageFileDetailsResolvers<ContextType = any, ParentType extends ResolversParentTypes['ImageFileDetails'] = ResolversParentTypes['ImageFileDetails']> = {
    size?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    image?: Resolver<Maybe<ResolversTypes['ImageDimensions']>, ParentType, ContextType>;
    __isTypeOf?: isTypeOfResolverFn<ParentType>;
};
export declare type InstructionResolvers<ContextType = any, ParentType extends ResolversParentTypes['Instruction'] = ResolversParentTypes['Instruction']> = {
    sys?: Resolver<Maybe<ResolversTypes['EntrySys']>, ParentType, ContextType>;
    fields?: Resolver<Maybe<ResolversTypes['InstructionFields']>, ParentType, ContextType>;
    __isTypeOf?: isTypeOfResolverFn<ParentType>;
};
export declare type InstructionBlockResolvers<ContextType = any, ParentType extends ResolversParentTypes['InstructionBlock'] = ResolversParentTypes['InstructionBlock']> = {
    sys?: Resolver<Maybe<ResolversTypes['EntrySys']>, ParentType, ContextType>;
    fields?: Resolver<Maybe<ResolversTypes['InstructionBlockFields']>, ParentType, ContextType>;
    __isTypeOf?: isTypeOfResolverFn<ParentType>;
};
export declare type InstructionBlockFieldsResolvers<ContextType = any, ParentType extends ResolversParentTypes['InstructionBlockFields'] = ResolversParentTypes['InstructionBlockFields']> = {
    instructionComponent?: Resolver<Maybe<ResolversTypes['InstructionComponent']>, ParentType, ContextType>;
    title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    style?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    __isTypeOf?: isTypeOfResolverFn<ParentType>;
};
export declare type InstructionComponentResolvers<ContextType = any, ParentType extends ResolversParentTypes['InstructionComponent'] = ResolversParentTypes['InstructionComponent']> = {
    sys?: Resolver<Maybe<ResolversTypes['EntrySys']>, ParentType, ContextType>;
    fields?: Resolver<Maybe<ResolversTypes['InstructionComponentFields']>, ParentType, ContextType>;
    __isTypeOf?: isTypeOfResolverFn<ParentType>;
};
export declare type InstructionComponentFieldsResolvers<ContextType = any, ParentType extends ResolversParentTypes['InstructionComponentFields'] = ResolversParentTypes['InstructionComponentFields']> = {
    title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    instructions?: Resolver<Maybe<Array<Maybe<ResolversTypes['Instruction']>>>, ParentType, ContextType>;
    __isTypeOf?: isTypeOfResolverFn<ParentType>;
};
export declare type InstructionFieldsResolvers<ContextType = any, ParentType extends ResolversParentTypes['InstructionFields'] = ResolversParentTypes['InstructionFields']> = {
    text?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    image?: Resolver<Maybe<ResolversTypes['ProductImage']>, ParentType, ContextType>;
    title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    __isTypeOf?: isTypeOfResolverFn<ParentType>;
};
export declare type MagentoProductInfoResolvers<ContextType = any, ParentType extends ResolversParentTypes['MagentoProductInfo'] = ResolversParentTypes['MagentoProductInfo']> = {
    sys?: Resolver<Maybe<ResolversTypes['EntrySys']>, ParentType, ContextType>;
    fields?: Resolver<Maybe<ResolversTypes['ProductInfoFields']>, ParentType, ContextType>;
    __isTypeOf?: isTypeOfResolverFn<ParentType>;
};
export declare type ProductBlockResolvers<ContextType = any, ParentType extends ResolversParentTypes['ProductBlock'] = ResolversParentTypes['ProductBlock']> = {
    sys?: Resolver<Maybe<ResolversTypes['EntrySys']>, ParentType, ContextType>;
    fields?: Resolver<Maybe<ResolversTypes['ProductBlockFields']>, ParentType, ContextType>;
    __isTypeOf?: isTypeOfResolverFn<ParentType>;
};
export declare type ProductBlockFieldsResolvers<ContextType = any, ParentType extends ResolversParentTypes['ProductBlockFields'] = ResolversParentTypes['ProductBlockFields']> = {
    productComponent?: Resolver<Maybe<ResolversTypes['ProductComponent']>, ParentType, ContextType>;
    style?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    blockTitle?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    __isTypeOf?: isTypeOfResolverFn<ParentType>;
};
export declare type ProductComponentResolvers<ContextType = any, ParentType extends ResolversParentTypes['ProductComponent'] = ResolversParentTypes['ProductComponent']> = {
    sys?: Resolver<Maybe<ResolversTypes['EntrySys']>, ParentType, ContextType>;
    fields?: Resolver<Maybe<ResolversTypes['ProductComponentFields']>, ParentType, ContextType>;
    __isTypeOf?: isTypeOfResolverFn<ParentType>;
};
export declare type ProductComponentFieldsResolvers<ContextType = any, ParentType extends ResolversParentTypes['ProductComponentFields'] = ResolversParentTypes['ProductComponentFields']> = {
    productName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    image?: Resolver<Maybe<Array<Maybe<ResolversTypes['ProductImage']>>>, ParentType, ContextType>;
    magentoProductInfo?: Resolver<Maybe<Array<Maybe<ResolversTypes['MagentoProductInfo']>>>, ParentType, ContextType>;
    slug?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    __isTypeOf?: isTypeOfResolverFn<ParentType>;
};
export declare type ProductImageResolvers<ContextType = any, ParentType extends ResolversParentTypes['ProductImage'] = ResolversParentTypes['ProductImage']> = {
    sys?: Resolver<Maybe<ResolversTypes['EntrySys']>, ParentType, ContextType>;
    fields?: Resolver<Maybe<ResolversTypes['ProductImageFields']>, ParentType, ContextType>;
    __isTypeOf?: isTypeOfResolverFn<ParentType>;
};
export declare type ProductImageFieldsResolvers<ContextType = any, ParentType extends ResolversParentTypes['ProductImageFields'] = ResolversParentTypes['ProductImageFields']> = {
    title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    file?: Resolver<Maybe<ResolversTypes['ImageFile']>, ParentType, ContextType>;
    __isTypeOf?: isTypeOfResolverFn<ParentType>;
};
export declare type ProductInfoFieldsResolvers<ContextType = any, ParentType extends ResolversParentTypes['ProductInfoFields'] = ResolversParentTypes['ProductInfoFields']> = {
    sku?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    __isTypeOf?: isTypeOfResolverFn<ParentType>;
};
export declare type QueryResolvers<ContextType = any, ParentType extends ResolversParentTypes['Query'] = ResolversParentTypes['Query']> = {
    viewer?: Resolver<ResolversTypes['User'], ParentType, ContextType>;
    entries?: Resolver<Maybe<Array<Maybe<ResolversTypes['Entry']>>>, ParentType, ContextType>;
};
export declare type SpaceResolvers<ContextType = any, ParentType extends ResolversParentTypes['Space'] = ResolversParentTypes['Space']> = {
    sys?: Resolver<Maybe<ResolversTypes['SpaceSys']>, ParentType, ContextType>;
    type?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    __isTypeOf?: isTypeOfResolverFn<ParentType>;
};
export declare type SpaceSysResolvers<ContextType = any, ParentType extends ResolversParentTypes['SpaceSys'] = ResolversParentTypes['SpaceSys']> = {
    type?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    linkType?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    __isTypeOf?: isTypeOfResolverFn<ParentType>;
};
export declare type UserResolvers<ContextType = any, ParentType extends ResolversParentTypes['User'] = ResolversParentTypes['User']> = {
    id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
    name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    status?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    __isTypeOf?: isTypeOfResolverFn<ParentType>;
};
export declare type Resolvers<ContextType = any> = {
    ContentSys?: ContentSysResolvers<ContextType>;
    ContentType?: ContentTypeResolvers<ContextType>;
    Country?: CountryResolvers<ContextType>;
    CountryFields?: CountryFieldsResolvers<ContextType>;
    Entry?: EntryResolvers<ContextType>;
    EntryFields?: EntryFieldsResolvers<ContextType>;
    EntrySys?: EntrySysResolvers<ContextType>;
    Environment?: EnvironmentResolvers<ContextType>;
    EnvironmentSys?: EnvironmentSysResolvers<ContextType>;
    ImageDimensions?: ImageDimensionsResolvers<ContextType>;
    ImageFile?: ImageFileResolvers<ContextType>;
    ImageFileDetails?: ImageFileDetailsResolvers<ContextType>;
    Instruction?: InstructionResolvers<ContextType>;
    InstructionBlock?: InstructionBlockResolvers<ContextType>;
    InstructionBlockFields?: InstructionBlockFieldsResolvers<ContextType>;
    InstructionComponent?: InstructionComponentResolvers<ContextType>;
    InstructionComponentFields?: InstructionComponentFieldsResolvers<ContextType>;
    InstructionFields?: InstructionFieldsResolvers<ContextType>;
    MagentoProductInfo?: MagentoProductInfoResolvers<ContextType>;
    ProductBlock?: ProductBlockResolvers<ContextType>;
    ProductBlockFields?: ProductBlockFieldsResolvers<ContextType>;
    ProductComponent?: ProductComponentResolvers<ContextType>;
    ProductComponentFields?: ProductComponentFieldsResolvers<ContextType>;
    ProductImage?: ProductImageResolvers<ContextType>;
    ProductImageFields?: ProductImageFieldsResolvers<ContextType>;
    ProductInfoFields?: ProductInfoFieldsResolvers<ContextType>;
    Query?: QueryResolvers<ContextType>;
    Space?: SpaceResolvers<ContextType>;
    SpaceSys?: SpaceSysResolvers<ContextType>;
    User?: UserResolvers<ContextType>;
};
/**
 * @deprecated
 * Use "Resolvers" root object instead. If you wish to get "IResolvers", add "typesPrefix: I" to your config.
*/
export declare type IResolvers<ContextType = any> = Resolvers<ContextType>;

          
// This is an extra code in addition to what graphql-codegen makes.
// Users are likely to use 'graphql-tag/loader' with 'graphql-tag/schema/loader'
// in webpack. This code enables the result to be typed.
import { DocumentNode } from 'graphql'
export default typeof DocumentNode
