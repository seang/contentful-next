/* bba0fb3588fd2516de638bdb6eb706ade720a99e
 * This file is automatically generated by graphql-let. */

/// <reference types="react" />
import * as ApolloReactCommon from '@apollo/react-common';
import * as ApolloReactComponents from '@apollo/react-components';
import * as ApolloReactHooks from '@apollo/react-hooks';
export declare type Maybe<T> = T | null;
export declare type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;
/** All built-in and custom scalars, mapped to their actual values */
export declare type Scalars = {
    ID: string;
    String: string;
    Boolean: boolean;
    Int: number;
    Float: number;
};
export declare type Entry = {
    __typename?: 'Entry';
    id: Scalars['ID'];
    name: Scalars['String'];
    status: Scalars['String'];
};
export declare type Query = {
    __typename?: 'Query';
    viewer: User;
    entry: Entry;
};
export declare type User = {
    __typename?: 'User';
    id: Scalars['ID'];
    name: Scalars['String'];
    status: Scalars['String'];
};
export declare type EntryQueryVariables = {};
export declare type EntryQuery = ({
    __typename?: 'Query';
} & {
    entry: ({
        __typename?: 'Entry';
    } & Pick<Entry, 'id' | 'name' | 'status'>);
});
export declare const EntryDocument: import("graphql").DocumentNode;
export declare type EntryComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<EntryQuery, EntryQueryVariables>, 'query'>;
export declare const EntryComponent: (props: EntryComponentProps) => JSX.Element;
/**
 * __useEntryQuery__
 *
 * To run a query within a React component, call `useEntryQuery` and pass it any options that fit your needs.
 * When your component renders, `useEntryQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useEntryQuery({
 *   variables: {
 *   },
 * });
 */
export declare function useEntryQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<EntryQuery, EntryQueryVariables>): ApolloReactCommon.QueryResult<EntryQuery, EntryQueryVariables>;
export declare function useEntryLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<EntryQuery, EntryQueryVariables>): ApolloReactHooks.QueryTuple<EntryQuery, EntryQueryVariables>;
export declare type EntryQueryHookResult = ReturnType<typeof useEntryQuery>;
export declare type EntryLazyQueryHookResult = ReturnType<typeof useEntryLazyQuery>;
export declare type EntryQueryResult = ApolloReactCommon.QueryResult<EntryQuery, EntryQueryVariables>;
